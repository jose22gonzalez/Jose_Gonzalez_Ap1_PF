@page "/R_Grupos"
@page "/R_Grupos/{grupoId:int}"
@inject IToastService toastService

<EditForm Model="grupos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div className="Container">
        <div class="card align-items-center">
            <div class="card">
                <div class="card-header">
                    <h3>Registros de Grupos</h3>
                </div>
                <div class="card-body">
                    <form>
                        @*GrupoId*@
                        <div class="form-row align-items-center">
                            <div class="col">
                                <div class="form-group">
                                    <label>Grupo Id</label>
                                    <div class="input-group">
                                        <InputNumber @bind-Value="grupos.GrupoId" class="form-control col-4" />
                                        <ValidationMessage For="@(() =>grupos.GrupoId)" />
                                        <div>
                                            <button type="submit"
                                                class="btn btn-primary input-group-text oi oi-magnifying-glass"
                                                @onclick="Buscar">Buscar</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @*Descripcion de Grupos*@
                        <div class="form-group">
                            <label>Descripcion Grupos</label>
                            <InputText @bind-Value="grupos.DescripcionCurso" class="form-control col-4" />
                            <ValidationMessage For="@(() =>grupos.DescripcionCurso)" />
                        </div>
                        @*Desde - Hasta*@
                        <div class="input-group d-flex align-items-end">
                            <div class="flex-fill mx-2">
                                <label>Desde</label>
                                <InputDate class="form-control" @bind-Value="grupos.Desde" />
                            </div>
                            <div class="flex-fill mx-2">
                                <label>Hasta</label>
                                <InputDate @bind-Value="grupos.Hasta" class="form-control" />
                            </div>
                        </div>
                        @*Tiempo*@
                         <div class="form-row align-items-center">
                            <div class="col">
                                <div class="form-group">
                                    <label>Tiempo</label>
                                    <div class="input-group">
                                        <InputNumber readonly @bind-Value="grupos.Tiempo"
                                            class="form-control col-4" />
                                             <ValidationMessage For="@(() =>grupos.Tiempo)" />
                                        <div>
                                            <span class="input-group-text">Horas</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        @*Capacidad*@
                        <div class="form-group">
                            <label>Capacidad</label>
                            <InputNumber @bind-Value="grupos.Capacidad" class="form-control col-4" />
                            <ValidationMessage For="@(() =>grupos.Capacidad)" />
                        </div>
                        @*Cupos Disponible*@
                        <div class="form-group">
                            <label>Cupos Disponible</label>
                            <InputNumber @bind-Value="grupos.CuposDisponible" class="form-control col-4" />
                            <ValidationMessage For="@(() =>grupos.CuposDisponible)" />
                        </div>
                    </form>
                </div>
                <div class="card-footer">
                    @*Botones de registros*@
                    <div class="form-group text-center" display: inline-block>
                        <button type="button" class="btn btn-lg btn-primary oi oi-pencil"
                            @onclick="Nuevo">Nuevo</button>
                        <button type="submit" class="btn btn-lg btn-success oi oi-plus">Guardar</button>
                        <button type="button" class="btn btn-lg btn-danger oi oi-trash"
                            @onclick="Eliminar">Eliminar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]
    public int grupoId { get; set; }
    Grupos grupos = new Grupos();
    Profesores profesores = new Profesores();
    Cursos cursos = new Cursos();
    Aulas aulas = new Aulas();
    [Inject]
    public GruposBBL gruposBBL { get; set; }

    protected override void OnInitialized()
    {
        grupos.GrupoId = grupoId;

        Buscar();
    }
    public void Buscar()
    {
        if (this.grupos.GrupoId > 0)
        {
            Grupos? encontrado = gruposBBL.Buscar(this.grupos.GrupoId);
            if (encontrado != null)
            {
                this.grupos = encontrado;

                toastService.ShowSuccess("A sido encontrado con exitos ");

            }
            else
            {
                toastService.ShowError("No se pudo encontrar con exito");
            }
        }
    }

    public void Nuevo()
    {
        grupos = new Grupos();
    }



    public void Guardar()
    {
        CalcularMesesDeDiferencia();
        
        if (gruposBBL.Guardar(grupos))
        {
            toastService.ShowSuccess("Se ha guardado correctamente el grupo");
            Nuevo();
        }
        else
        {
            toastService.ShowError("No se puede guardar correctamente el grupo");
        }



    }

    public void CalcularMesesDeDiferencia()
    {
      DateTime fechainicial = grupos.Desde.Value.Date;
      DateTime fechafinal = grupos.Hasta.Value.Date;

      TimeSpan tspan = fechafinal - fechainicial;

      int dias = tspan.Days;
      grupos.Tiempo = dias;
    }

    public void Eliminar()
    {
        bool eliminado;
        eliminado = gruposBBL.Eliminar(grupos.GrupoId);
        if (eliminado)
        {
            Nuevo();
            toastService.ShowSuccess("Eliminaci√≥n exitosa");
        }
        else
        {
            toastService.ShowSuccess("No se pudo eliminar con exito");
        }
    }
}
}